---
layout: post
title:  "리팩토링 - 조건문 간결화"
date:   2018-04-06 00:00:01
categories: DevBook
tags:	refactoring 
---

프로그램에서 가장 복잡한 부분은 주로 복잡한 조건문이다. 조건 검사와 그에 따른 액션 코드를 보고 원리는 알 수 있지만 왜 그렇게 되지는 알기 힘들다. 이런 경우 **Decompose Conditional** 기법을 사용하여 if, then, else 부분을 각각 메서드로 빼내자. 

여러 조건 검사가 있는데 결과가 모두 같을 때는 **Consolidate Conditional Expression** 을 사용하여 검사 수행에서 무엇을 검사하는지 명확히 나타내도록 하며, 중복 코드를 제거하기 위해서는 **Consolidate Duplicate Conditional Fragments**를 사용하자. 

메서드에 조건문이 많아 정상적인 실행 경로를 파악하기 힘들 땐 **Replcae Nested Conditional with Guard Clauses** 를 사용하여 모든 특수한 경우에 대해 감시 절을 사용하자. 조건문의 의도는 주로 경로가 정상/비정상일때로 다른데, 그 의도는 코드에 반영되어 드러나야 한다. 감시절은 "이것은 드문 경우이니 이 경우가 발생하면 빠져나와라"라고 명령한다. 

객체 지향 프로그램은 절차 프로그램에 비해 조건에 따른 동작이 적은데, 이것은 조건에 따른 동작이 대부분 재정의를 통해 처리되기 때문이다. 재정의 방식이 좋은 이유는 호출 코드가 조건문 원리를 알 필요 없어서 조건문을 확장하기가 간펴나기 때문이다. Switch-case 문에 **Replace Conditional with Polymorphism**을 적용해야 하면, 클래스 사용 부분은 그 하위 클래스를 알 필요 없이 새 타입을 추가하여 시스템 내부의 의존성이 줄어들고 수정이 쉬워진다. 

<br/>

<a href="http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=20793053">
  <img class="book" style="width: 30%; height: 30%" src="http://image.aladin.co.kr/product/2079/30/cover/8979149719_1.jpg"/>
</a>

