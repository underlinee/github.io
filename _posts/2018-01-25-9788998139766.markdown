---
layout: post
title:  "객체지향의 사실과 오해 - 역할, 책임, 협력 관점에서 본 객체지향"
date:   2018-02-05 16:43:59
categories: DevBook
tags:	객체지향의사실과오해 객체설계 조영호 
---


## 객체지향
사용자가 최종적으로 인식하게 되는 시스템의 기능은 객체들이 성실히 협력해서 일궈낸 결실이다. 애플리케이션의 기능은 더 작은 책임으로 분할되고 책임은 적절한 역할을 수행할 수 있는 객체에 의해 수행된다. 객체는 자신의 책임을 수행하는 도중에 다른 객체에게 도움을 요청하기도 한다. 결론적으로 시스템은 역할과 책임을 수행하는 객체로 분할되고 시스템의 기능은 객체 간의 연쇄적인 요청과 응답의 흐름으로 구성된 협력으로 구현된다.

<br/> 


## 객체
객체란 식별 가능한 개체 또는 사물이다. 객체는 자동차처럼 만질 수 있는 구체적인 사물일 수도 있고, 시간처럼 추상적인 개념일 수도 있다. 객체는 구별 가능한 식별자, 특징적인 행동, 변경 가능한 상태를 가진다. 소프트웨어 안에서 객체는 저장된 상태와 실행 가능한 코드를 통해 구현된다. 

<br/> 

#### 객체의 역할
- 여러 객체가 동일한 역할을 수행할 수 있다. 
- 역할은 대체 가능성을 의미한다. 
- 각 객체는 책임을 수행하는 방법을 자율적으로 선택할 수 있다. 
- 하나의 객체가 동시에 여러 역할을 수행할 수 있다. 

<br/> 

#### 상태
상태는 특정 시점에 객체가 가지고 있는 정보의 집합으로 객체의 구조적 특징을 표현한다. 객체의 상태는 객체에 존재하는 정적인 프로퍼티와 동적인 프로퍼티 값으로 구성된다. 객체의 프로퍼티는 단순한 값과 다른 객체를 참조하는 링크로 구분할 수 있다. 

<br/> 

#### 행동
행동이란 외부의 요청 또는 수신된 메시지에 응답하기 위해 동작하고 반응하는 활동이다. 행동의 결과로 객체는 자신의 상태를 변경하거나 다른 객체에게 메시지를 전달할 수 있다. 객체는 행동을 통해 다른 객체와의 협력에 참여하므로 행동은 외부에 가시적이어야 한다. 

<br/> 

#### 식별자
식별자란 어떤 객체를 다른 객체와 구분하는 데 사용하는 객체의 프로퍼티다. 값은 식별자를 가지지 않기 때문에 상태를 이용한 동등성 검사를 통해 두 인스턴스를 비교해야 한다. 객체는 상태가 변경될 수 있기 때문에 식별자를 이용한 동일성 검사를 통해 두 인스턴스를 비교할 수 있다. 

<br/> 

#### 객체의특성
- 객체는 상태를 가지며 상태는 변경 가능하다. 
- 객체의 상태를 변경시키는 것은 객체의 행동이다. 
- 행동의 결과는 상태에 의존적이며, 상태를 이용해 서술할 수 있다. 
- 행동의 순서가 시행 결과에 영향을 미친다. 
- 객체는 어떤 상태에 있더라도 유일하게 식별가능하다. 

<br/> 

## 추상화 
어떤 양상, 세부사항, 구조를 좀 더 명확하게 이해하기 위해 특정 절차나 물체를 의도적으로 생략하거나 감춤으로써 복잡도를 극복하는 방법이다. 복잡성을 다루기 위해 추상화는 두 차원에서 이루어진다. 첫 번째 차원은 구체적인 사물들 간의 공통점은 취하고 차이점은 버리는 일반화를 통해 단순하게 만드는 것이다. 두 번째 차원은 중요한 부분을 강조하기 위해 불필요한 세부사항을 제거함으로써 단순하게 만드는 것이다. 모든 경우에 추상화의 목적은 복잡성을 이해하기 쉬운 수준으로 단순화하는 것이라는 점을 기억하라. 

<br/> 

## 동적모델과정적모델
객체를 생각할 때 우리는 두 가지 모델을 동시에 고려한다는 사실을 알 수 있다. 하나는 객체가 특정 시점에 구체적으로 어떤 상태를 가지느냐다. 이를 객체의 스냅샷이라고 한다. 객체지향 모델링을 위한 표준언어는 UML에서 스냅샷은 객체 다이어그램이라고도 불린다. 스냅샷처럼 실제로 객체가 살아 움직이는 동안 상태가 어떻게 변하고 어떻게 행동하는지를 포작하는 것을 동적모델이라고 한다. 다른 하나는 객체가 가질 수 있는 모든 상태와 모든 행동을 시간에 독립적으로 표현하는 것이다. 일반적으로 이런 모델을 타입 모델이라고 한다. 이 모델은 동적으로 변하는 객체의 상태가 아니라 객체가 속한 타입의 정적인 모습을 표현하기 때문에 정적 모델이라고도 한다. 

<br/> 

## 객체설계
올바른 객체를 설계하기 위해서는 먼저 견고하고 깔끔한 협력을 설계해야 한다. 협력을 설계한다는 것은 설계에 참여하는 객체들이 주고받을 요청과 응답의 흐름을 결정한다는 것을 의미한다. 이렇게 결정된 요청과 응답의 흐름은 객체가 협력에 참여하기 위해 수행될 책임이 된다.  일단 객체에게 책임을 할당하고 나면 책임은 객체가 외부에 제공하게 될 행동이 된다. 협력이라는 문맥에서 객체가 수행하게 될 적절한 책임, 즉 행동을 결정한 후에 그 행동을 수행하는 데 필요한 데이터를 고민해야 한다. 그리고 객체가 협력에 참여하기 위해 필요한 데이터와 행동이 어느 정도 결정된 후에 클래스의 구현 방법을 결정해야 한다. 결론적으로 객체 설계의 핵심은 객체를 두 개의 분리된 요소로 분할해 설계하는 것이다. 그것은 바로 외부에 공개되는 인터페이스와 내부에 감춰지는 구현이다. 일반적으로 외부와 내부를 나누기 위한 객체 설계 방법을 캡슐화라고 한다. 캡슐화는 객체의 자율성을 보존하기 위해 구현을 외부로부터 감추는 것을 말한다. 

<br/> 

## 다형성
일단 메시지와 메서드의 차이와 관계를 이해하고 나면 객체지향의 핵심 개념인 다형성을 쉽게 이해할 수 있다. 다형성이란 서로 다른 유형의 객체가 동일한 메시지에 대해 서로 다르게 반응하는 것을 의미한다. 좀 더 구체적으로 말해 서로 다른 타입에 속하는 객체들이 동일한 메시지를 수신할 경우 서로 다른 메서드를 이용해 메시지를 처리할 수 있는 메커니즘을 가리킨다. 

<br/> 

<a href="http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=60550259&start=slayer">
  <img class="book" style="width: 30%; height: 30%" src="http://image.aladin.co.kr/product/6055/2/cover/8998139766_1.jpg"/>
</a>

