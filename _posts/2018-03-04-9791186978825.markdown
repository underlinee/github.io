---
layout: post
title:  "이펙티브 파이썬 - 클래스와 상속"
date:   2018-03-04 00:10:59
categories: DevBook
tags:   이펙티브파이썬 비공개속성 파이썬 classmethod super mixin 믹스인
---


<br/>
## 인터페이스가 간단하면 클래스 대신 함수를 받자
파이썬에서 함수와 메서드는 일급이다. 즉 다른 타입처럼 표현식에서 사용할 수 있다. 간단한 인터페이스 용으로 함수만 사용할 수 있지만, 상태를 보존하는 함수가 필요할 때__call__ 이라는 메서드를 제공하는 클래스를 정의해서 문제를 해결하면 상태 보존 클로저라는 목적을 잘 드러난다. 
```
class BetterCountMissing(object):
    def __init__(self):
        self.added = 0

    def __call__(self):
        self.added +=1
        return 0

counter = BetterCountMissing()
result = defaultdict(counter, current)

```

<br/>


## 객체를 범용으로 생성하려면 @classmethod 다형성을 이용하자
다형성을 이용하면 여러 클래스가 같은 인터페이스나 추상 기반 클래스를 충족하면서도 다른 기능을 제공할 수 있다. 다형성을 제공하기 위해서는 범용적으로 사용할 수 있는 특별한 생성자가 필요하다. @classmethod 데코레이터를 이용하여 클래스메서드를 생성하면 cls를 매개변수로 범용 생성자를 사용할 수 있다. 

```
class GenericInputData(object):
    def read(self):
        raise NotImplementedError

    @classmethod
    def generate_inputs(cls, config):
        raise NotImplementedError

class PathInputData(GenericInputData):
    def read(self):
        return open(self.path).read()

    @classmethod
    def generate_inputs(cls, config):
        data_dir = config['data_dir']
        for name in os.listdir(data_dir):
            yield cls(os.path.join(data_dir, name))
```

<br/>

## super로 부모 클래스를 초기화하자
부모 클래스의 \_\_init\_\_ 메서드를 사용하고 싶은 경우, 자식 클래스에서 부모 클래스의 \_\_init\_\_ 메서드를 직접 호출하여 부모 클래스를 초기화하는 방법이 있다. 이 방법은 간단한 계층 구조에서는 잘 동작하지만 다이아몬드 상속의 경우 부모의 \_\_init\_\_ 메서드를 두 번 호출하여 예상치 못한 결과를 일으키는 경우가 있다. 파이썬 2.2부터 MRO(Method Resolution Order) 를 정의하여 이 문제를 해결하였으며, 파이썬 3에서는 super() 를 호출하여 좀 더 간결하게 부모 클래스 초기화를 가능하게 했다. 
```
class MyChildClass(MyParentClass):
    def __init__(self, value):
        super().__init__(value * 2)

```

<br/>

## 믹스인 유틸리티 클래스에만 다중 상속을 사용하자
다중 상속으로 얻는 편리함이 필요하다면 믹스인을 고려하자. 믹스인이란 클래스에서 제공해야 하는 추가적인 메서드만 정의하는 클래스를 말한다. 믹스인 클래스는 자체의 인스턴스 속성을 정의하지 않으며 \_\_init\_\_ 생성자를 호출하도록 요구하지 않는다. 간단한 동작들도 복잡한 기능을 생성하려면 믹스인을 조합하자. 파이썬은 다중 상속 지원하기는 하지만 아예 하지 않는 편이 낫다. 
```
class JsonMixin(object):
    @classmethod
    def from_json(cls, data):
        kwargs = json.loads(data)
        return cls(**kwargs)

    def to_json(self):
        return json.dumps(self.to_dict)

```

<br/>

## 비공개 속성보다는 공개 속성을 사용하자
파이썬은 비공개 속성을 밑줄을 두 개 붙여 지정할 수 있지만, 엄격하게 강요하지 않는다. 단순히 비공개 필드의 이름을 변경하도록 구현되어 있어서, \_\_MyObject\_\_private\_field로 접근하도록 변환하면 접근이 가능하다. 하지만 계층 구조가 변할 경우, 필드 할당의 주체가 바뀌면서  MyObject의 이름이 바뀔 가능성이 있기 때문에 문제가 될 수 있다. 비공개 필드를 처음부터 막기 보다는 문서화를 잘하자. 비공개 필드는 직접 제어할 수 없는 서브클래스의 필드와 이름이 겹치지 않게 할 때만 사용하는 것을 고려하는 것이 낫다. 
```
class ApiClass(object):
    def __init__(self):
        self.__value = 5
        
    def get(self):
        return self.__value
    
class Child(ApiClass):
    def __init__(self):
        super().__init__()
        self._value = 'hello'
```


<br/>

## 커스텀 컨테이너 타입은 collections.abc의 클래스를 상속받게 하자
파이썬 프로그램의 대부분은 데이터를 담은 클래스를 정의하고 이 객체들이 연계되는 방법을 명시하는 일이다. 커스텀 컨테이터 타입을 정의할 때 쓰임새가 간단하거나 기존 컨테이너에서 필요한 동작만 추가하는 경우 list, dict 같은 파이썬 컨테이너 타입에서 직접 상속 받게 하자. 만일 좀 더 복잡한 커스텀이 필요한 경우 collections.abc의 추상기반 클래스를 상속 받자. 필요한 인터페이스와 동작을 일치 시킬 수 있다. 
 
<br />


<a href="http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=80277523">
  <img class="book" style="width: 30%; height: 30%" src="http://image.aladin.co.kr/product/8027/75/cover/k212434638_1.jpg"/>
</a>