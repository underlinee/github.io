---
layout: post
title:  "이펙티브 파이썬 - 내장 모듈"
date:   2018-03-06 00:10:59
categories: Book
tags:	wraps contextlib contextmanager copyreg pickle datetime decimal
---


## functools.wraps로 함수 데코레이터를 정의하자
@ 심볼과 데코레이터 함수의 이름을 붙여 쓰는 간단한 구문으로 함수의 데코레이터를 사용할 수 있다. 데코레이터는 감싼 내부 함수의 여러 표준 속성 (\_\_name\_\_, \_\_module\_\_) 등을 사용할 수 없게 되는 부작용이 있는데. 이 함수들의 인터페이스를 유지하려면 내장 모듈 functools의 wraps 헬퍼 함수를 사용하면 된다. 
```
def trace(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        print("{}({}, {}) -> {}".format(func.__name__, args, kwargs, result))
        return result
    return wrapper

@trace
def fibonacci(n):
    ...

```
<br/>

## 재사용 가능한 try/finally 동작을 만들려면 contextlib와 with 문을 고려하자
with 문을 이용하면 try/finally 블록의 로직을 재사용할 수 있다. 내장 모듈 contextlib의 contextmanager 데코레이터를 이용하면 직접 작성한 함수를 with 문에서 쉽게 사용할 수 있다. 
컨텍스트 매니저에서 넘겨준 값은 with 문의 as 부분에 할당된다. 컨텍스트 매니저에서 값을 반환하는 방법은 코드에서 특별한 컨텍스트에 접근하려는 경우에 유용하다. 
```
@contextmanager
def log_level(level, name):
    logger = logging.getLogger(name)
    old_level = logger.getEffectiveLevel()
    logger.setLevel(level)
    try:
        yield logger
    finally:
        logger.setLevel(old_level)

with log_level(logging.DEBUG, 'my-log') as logger:
    logger.debug('This is my message')
    logging.debug('This will not print')

```
<br/>


## copyreg로 pickle을 신뢰할 수 있게 만들자
내장 모듈 pickle은 파이썬 객체를 바이트 스트림으로 직렬화하거나 바이트를 객체로 역직렬화하는 데 사용한다. 만일 pickle을 간단한 용도로 사용하지 않고 속성값, 클래스 이름 등을 변경하거나 버전 관리 기능을 제공하려면 내장 모듈 copyreg를 사용해야 한다. copyreg에는 직렬화 대상 객체와 직렬화 함수를 등록한다. 
```
def pickle_game_state(game_state):
    kwargs = game_state.__dict__
    kwargs['version'] = 2
    return unpickle_game_state, (kwargs)

def unpickle_game_state(kwargs):
    version = kwargs.pop('version', 1)
    if version == 1:
        kwargs.pop('lives')
    return GameState(**kwargs)

copyreg.pickle(GameState, pickle_game_state)

```
<br/>

## 지역 시간은 time이 아닌 datetime으로 표현하자
UTC는 시간대에 의존하지 않는 표준 시간 표현이다. 사람이 살고 있는 곳의 시간대를 고려하여 이 시간을 변환할 필요가 있을 때, time은 플랫폼에 의존적으로 정확하게 동작하지 않는 경우가 있다. 대신 datetime을 사용해야 한다. datetime은 tzinfo 클래스를 이용한 시간대 변환만 지원하지만 pytz 모듈을 설치하면 필요한 모든 시간대로 변환이 가능하다. 
```
arrival_nyc = '2014-05-01 23:33:24'
nyc_dt_naive = datetime.strptime(arrival_nyc, time_format)
eastern = pytz.timezone('US/Eastern')
nyc_dt = eastern.localize(nyc_dt_naive)
utc_dt = pytz.utc.normalize(nyc_dt.astimezone(pytz.utc))
```
<br/>

## 내장 알고리즘과 자료구조를 사용하자 
- collections.deque : 더블 엔디드 큐로 큐의 처음과 끝에서 아이템을 삭제하거나 삽입 할 때 항상 일정한 시간이 걸린다. list는 시작부분에서 아이템 삭제와 삽입시 linear time이 걸린다. 
- collections.OrderedDict: 키가 삽입된 순서를 유지하는 딕셔너리다. dict는 같은 키와 값을 가지고 있어도 순회할 때마다 다른 순서로 나올 수 있다. 
- collections.defaultdict: 키가 존재하지 않으면 자동으로 기본값을 저장하도록 한다.   
- heapq : 힙은 우선순위 큐를 유지하는 유용한 자료구로 heappush, heappop 등의 함수를 제공한다. heappop에서 아이템은 가장 우선순위가 높은 것부터 제거된다. Heapq 연산은 로그 형태로 증가한다. 
- bisect: 정렬된 아이템 시퀀스를 대상으로 한 효율적인 바이너리 검색을 제공한다. 검색의 복잡도는 로그 형태로 증가한다. 
- itertools: 이터레이터를 구성하거나 이터레이터와 상호작용하는 데 유용한 함수를 다수 포함한다. 

<br/>

## 정밀도가 중요할 때는 decimal을 사용하자
파이썬은 숫자 데이터를 다루는 코드를 작성하기 뛰어난 언어다. 허수 값이나 복소수 값까지 제공한다. 정확한 값 계산이 필요할 때는 부동소수점 타입으로 부족할 때가 있다. 내장 모듈 decimal은 소수점이 28자리인 고정 소수점 연산을 제공하며 필요하면 자릿수를 늘릴 수 있고 반올림 연산도 더 세밀하게 제어할 수 있다.  
```
rate = Decimal('0.05')
seconds = Decimal('5')
cost = rate * seconds / Decimal('60')
print(cost)

>> 0.00416666666666666666666666666667
```
<br/>

## 커뮤니티에서 만든 모듈을 어디서 찾아야 하는지 알아두자 
파이썬 패키지 인덱스 (PyPI)는 파이썬 커뮤니티에서 만들고 유지하는 풍부한 공통 패키지를 포함하며, pip은 PyPI에서 패키지를 설치하는 데 사용하는 명령줄 도구다. pip은 파이썬 3.4 이후로 기본으로 설치되어 있다. 



<br/>


<a href="http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=80277523">
  <img class="book" style="width: 30%; height: 30%" src="http://image.aladin.co.kr/product/8027/75/cover/k212434638_1.jpg"/>
</a>