---
layout: post
title:  "자바 성능 튜닝 - 자바 모니터링 도구"
date:   2018-02-22 00:01:59
categories: Book
tags:	Java 성능 모니터링 monitor  
---


<br/> 

## 운영체제 모니터링 도구
 


#### CPU 사용률

코드를 최적화하는 목표는 유휴 상태를 줄여 CPU 사용률을 높이는 것이다. Vmstat 1 매초마다 한 줄의 일련의 정보를 얻게 된다. us는 CPU가 사용자 코드를 실행하는 시간의 백분율이고 sy는 CPU가 커널 코드를 실행시키는 시간의 백분율이다. id는 는 유휴 상태다. CPU는 처리해야 할 작업이 있을 때도 유휴 상태가 될 수 있는데, 작업을 처리할 프로그램에 가용 스레드가 없거나, 락이나 외부 자원의 병목 현상과 같은 다른 이유로도 그럴 수 있다. 행동 방침을 결정하기 전에 프로그램이 CPU를 할당 받지 않는 이유를 이해해야 한다.


#### CPU Run Queue

vmstat의 첫 열 r은 CPU를 사용하기 위해 Run Queue에서 대기하고 있는 쓰레드의 수이다. 특정 기간에 런 큐의 길이가 너무 크다면 머신이 과부하를 받는다는 표시이고, 머신이 하고 있는 작업의 양을 줄여야 한다. 실행시킬 스레드가 가용 CPU보다 많다면 성능은 저하되기 시작한다.

<a href="//underlinee.github.io/assets/20180223-1.png" data-lightbox="falcon9-large">
  <img src="//underlinee.github.io/assets/20180223-1.png"/>
</a>
<br/>


#### 디스크 사용률

디스크 사용률 모니터링의 목표는 애플리케이션의 I/O 병목을 보는 것이고, 두번째 이유는 swap 현황을 모니터링하는 것이다. I/O 병목을 확인하기 위해 iostat을 활용할 수 있다. 비효율적으로 데이터를 쓰거나 너무 많이 데이터를 쓰는 경우 병목 현상이 일어날 수 있다. 스왑은 성능에 중요한 영향을 미친다. vmstat도 swap in/out을 알리며 디스크 i/o도 스와핑이 일어나고 있다는 사실을 알려주는 또 다른 지표다.

- r/s와 w/s : 디바이스의 초당 요청 수
- iowait : 프로세스가 디스크 io를 기다리는데 소비하는 시간
- w/MB : 초당 쓰는 데이터량
- w_await : 쓰기 처리를 위한 평균 소요 시간, 단위는 ms

<a href="//underlinee.github.io/assets/20180223-2.png" data-lightbox="falcon9-large">
  <img src="//underlinee.github.io/assets/20180223-2.png"/>
</a>
<br/>

#### 네트워크 사용량

대역폭이 너무 작거나 특정 네트워크 인터페이스가 처리할 수 있는 것보다 더 많은 데이터가 유입되면 애플리케이션이 비효율적으로 네트워크를 사용하게 된다. 네트워크 대역폭 모니터링은 nicstat을 많이 사용한다. nicstat은 인터페이스별 트래픽 개요 특히 이용률을 를 보여준다는 점에서 편리하다.

<br/>


## 자바 모니터링 도구
 

JDK에 여러 유용한 도구가 포함되어 있다. 직접 사용해보자.

- jcmd : 가동시간, system properties jvm 버전, 튜닝 플래그를 확인
- jconsole : 스레드/클래스 사용률, GC/JVM 내역 확인
- jstack : 스택 덤프를
- jvisualvm : 실행중인 애플리케이션 프로파일
- jinfo : 실행중인 애플리케이션에 대한 정보 확인
- jmap : 힙 덤프와 메모리 사용률에 대한 정보 확인
- java -XX:+PrintFlagsFinal -version : Java default 플래그 확인

<br/>

## 프로파일링 도구

자바 프로파일러는 샘플링 프로파일러와 장착형 프로파일러로 나눌 수 있다. 샘플링 프로파일러는 가장 일반적인 프로파일러로, 주기적으로 타이머가 작동될 때 동작한다. 애플리케이션 측정 관련 설정을 하면서 기존 성능에 영향을 주지 않기 위해 샘플링 프로파일러를 이용한다. 샘플링이 균형 잡히게 일어나지 않아 에러를 일으킬 수 있으나 샘플링 간격을 줄이면 성능에 영향이 있기 때문에 균형을 잘 잡아야 한다. 장착형 프로파일러는 정확하게 어떤 요소를 최적화해야 효과가 좋을지 확인하는데 도움이 되지만, 성능상 차이가 샘플링 방식보다 더 클 가능성이 있다.
 

프로파일링시 주의할 점이 몇가지 있다.
- 대부분의 자바 프로파일러는 대상 애플리케이션에 소켓등을 통해 연결되어 동작한다. 연결된 프로파일러는 대상 애플리케이션과 정보를 교환하는데, 애플리케이션의 규모가 크다면 상당히 많은 데이터가 전달된다. 따라서 큰 힙과 동시 병렬 GC 알고리즘으로 프로파일러를 실행하는 편이 좋다.
- 일반적으로 프로파일 내의 상위 메서드를 최적화시켜야 한다고 가정하지만, 상위 메서드가 네이티브 메서드인 경우 처럼 최적화가 불가능한 경우도 있다. 상위 메서드는 살펴봐야 할 영역을 가리킬 뿐이다.
- 스레드가 블록된 시간은 실행 시간을 결정하는 주요 요인이다. 따라서 블록된 이유를 확인할 필요가 있다. 프로파일러 대부분에는 블로킹 호출을 보여주거나 감주는 옵션이 있다.


<br/>

## 자바 미션 컨트롤
 

자바8에는 jmc라는 신규 모니터링과 컨트롤 기능이 포함되었다. jmc의 주요 기능은 Java Flight Recorder다. JFR 데이터는 JVM 내의 이벤트 이력이다. JFR은 프로그램 성능의 1% 미만으로 영향을 줄 정도록 오버헤드가 낮다. 오라클 JVM 상용 버전은 default로 JFR이 비활성화 되어 있다. 활성화를 위해 -XX:+UnlockCommercialFeatures -XX:+FlightRecorder 를 추가하자. 레코딩 시작은 커맨드 라인이나 jmc를 통해 할 수 있다.


<br/>

<a href="http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=79248318">
  <img class="book" style="width: 30%; height: 30%" src="http://image.aladin.co.kr/product/7924/83/cover/k542434036_1.jpg"/>
</a>

 
