---
layout: post
title:  "Release It - 안정성 패턴"
date:   2018-02-09 16:43:59
categories: DevBook
tags:	ReleaseIt 아키텍쳐설계 소프트웨어배치 안정성  
---

## 제한시간
제한 시간 패턴은 통합 지점으로의 호출이 블록된 스레드가 되는 것을 방지하여 연속적인 고장을 막는다. 제한 시간을 초과하는 것의 대부분은 즉시 해결되지 않는 경우가 많다. 즉시 재시도하면 사용자가 더 오래 기다리게 만들 뿐이다. 작업을 큐에 올려 놨다가 나중에 재시도하는 것을 고려하자.

<br/> 

## 차단기
차단기는 모든 방식의 통합 지점 문제로부터 시스템을 보호하는 기본적인 패턴이다. 통합 지점에 어려움이 있을 때 통합지점을 호출하지 말라. 제한 시간 패턴은 통합지점에 문제가 있음을 지적해준다.  차단기와 함께 사용해라. 차단기의 상태가 변한다는 것은 '항상' 심각한 문제가 있음을 나타낸다. 따라서 운영팀이 볼 수 있어야 한다. 보고되고, 기록되고, 경향과 연관성이 파악되어야 한다. 

<br/> 

## 칸막이
칸막이 패턴은 안 좋은 일이 생길 때 부분적인 기능을 보존하기 위해 용량을 분할 한다. 서버를 분할하는 것은 각 분할이 여유 용량을 더 많이 필요로 하는 것을 뜻한다. 효율이 떨어지는 리소스 사용을 받아들일지 고려하라. 

<br/> 

## 정상상태 유지
인간의 개입은 문제를 야기한다. 인간의 개입을 일으킬 필요를 없애라. 여러분의 시스템은 수동 디스크 비우기나 매일 밤 다시 시작하는 일 없이 최소한 전형적인 개발 사이클 동안 실행되어야 한다. 데이터가 제거되는 방법은 애플리케이션을 통해서여야 한다. 무결성이 유지되지 않을 가능성이 있을때 애플리케이션이 어떻게 동작할지 알 수 없다. 캐시가 로그가 소비하는 리소스를 제한하라. 

<br/> 

## 빠른고장
에러메시지를 기다리게 하지 말고 빨리 실패하라. 리소스를 예약하고 통합 지점을 미리 확인해서 불필요한 일을 하지 않도록 하자. 트랜잭션 중간에 그 상태가 바뀔 확률은 매우 낮다. 리소스 예약 전에도 기본적인 입력을 확인하라. 알고보니 필요한 매개변수가 없다면 얼마나 성가신가.

<br/> 

## 핸드셰이킹
클라이언트와 서버 간의 핸드셰이킹은 서비스가 가능한 수준으로 요구를 조절하게 허용한다. 그러나 HTTP 등 애플리케이션 수준의 프로토콜은 대부분 핸드셰이킹을 수행하지 않는다. 상태 확인 요청은 핸드셰이킹이 없는 경우의 대안이다. 호출해서 실패하는 것보다 추가 호출비용이 현저히 낮다면 상태 확인 요청을 고려해라. 

<br/> 

## 테스트 하니스
실제 애플리케이션을 호출하면 그 애플리케이션이 고의로 만든 에러만을 테스트할 수 있다. 좋은 테스트 하니스는 뒤섞이고 실질적인 온갖 종류의 고장 유형을 시뮬레이션 한다. 느린 응답, 무응답, 쓰레기 응답을 만들 수 있고, 이런 응답에 대한 테스트는 기능적 테스트가 아닌 비기능적 테스트이다. 

<br/> 

## 분리하는 미들웨어
다른 안정성 패턴은 설계나 아키텍처의 대규모 변화 없이 구현될 수 있으나, 미들웨어는 아키텍쳐적인 결정이다. 돌이키기 어려운 결정 중 하나다. 개별 서버, 계층, 애플리케이션을 더 확실히 분리할 수록 문제는 적어진다. 많은 아키텍쳐 스타일을 배우고 그 가운데서 선택하자.

<br/> 


<a href="http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=1006539">
  <img class="book" style="width: 30%; height: 30%" src="http://image.aladin.co.kr/product/100/65/cover/8992939108_1.jpg"/>
</a>

