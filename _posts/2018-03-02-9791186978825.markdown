---
layout: post
title:  "이펙티브 파이썬 - 파이썬다운 생각"
date:   2018-03-02 00:10:59
categories: Book
tags:	Python effective 
---


## 복잡한 표현식 대신 헬퍼 함수를 작성하자
표현식이 복잡해지기 시작하면 해당 로직을 헬퍼 함수로 옮기는 방안을 고려해야 한다. 무조건 짧은 코드보다는 가독성을 선택하는 편이 낫다. 
```
>>> values.get(‘red’, [‘’])[0] or 0
>>> red = get_frist_int(values, ‘red’)
```

<br/>

## 시퀀스를 슬라이스하는 방법을 알자. 
슬라이싱 문법의 기본 형태는 somelist[start:end] 이며, end 인덱스는 제외된다. 시퀀스의 일부분을 슬라이스하여 할당하면 원본 시퀀스의 지정한 범위를 대체한다. 또한 파이썬에는 somelist[start:end:stride]처럼 슬라이스의 스트라이드를 설정하는 문법도 있다. 이 문법을 사용하면 매 n번째 아이템 그룹을 쉽게 가져올 수 있다. 하지만 한 슬라이스에 start, end, stride를 함께 쓰지 말자. 대괄호 하나에 숫자가 세 개나 있으면 start, end, stride가 연계하여 어떤 작용을 하는지 분명하지 않다. 괜한 버그의 가능성을 만들기보다는 필요하다면 할당을 두 번 하는 것이 낫다. 
```
>>> Before[1:3] = ['a','b']
>>> Before = [1,2,3,4,5]
>>> Before[1:3] = ['a','b']
>>> Before
[1, 'a', 'b', 4, 5]
```
```
>>> After = Before[:]
>>> After
[1, 'a', 'b', 4, 5]
```
<br/>

## map과 filter 대신 리스트 컴프리헨션을 사용하자
파이썬에는 한 리스트에서 다른 리스트를 만들어내는 간결한 문법이 있다. 이 표현식을 리스트 컴프리헨션이라고 한다. map이나 filter는 추가적인 lamda 식이 필요해서 명확하지 않다. 딕셔너리나 세트도 컴프리헨션 표현식을 지원한다.
```
>>> rank = {'kakao':1, 'google':2, 'naver':3}
>>> name_dict = {rank: name for name, rank in rank.items()}
>>> name_len_set = {len(name) for name in name_dict.values()}
>>> name_dict
{1: 'kakao', 2: 'google', 3: 'naver'}
>>> name_len_set
set([5, 6])
```
리스트 컴프리헨션에서 다중 루프와 다중 조건을 지원하지만, 표현식을 두 개 넘게 쓰지 말자. 이런 코드는 이해하기 매우 어렵다.    
```
>>> matrix = [[1,2,3], [4,5,6], [7,8,9]]
>>> filtered = [[x for x in row if x % 3 == 0]
... for row in matrix if sum(row) >= 10]
>>> filtered
[[6], [9]]
```
<br/>

## 컴프리헨션에서 처리해야할 데이터가 많을 때는 제너레이터 표현식을 고려하자. 
리스트 컴프리헨션은 각 아이템을 하나씩 복사해서 새 시퀀스를 만들 수 있다. 이 방법은 메모리를 많이 소모해서 문제를 일으킬 수 있다. 제너레이터 표현식은 메모리에 해당 시퀀스를 로딩하지 않고 iterator를 반환한다. 또한 한 제너레이터에서 나온 이터레이터를 다른 제너레이터 표현식의 서브 표현식으로 넘겨 조합할 수 있다. 
```
>>> it = (len(x) for x in open('/Users/hello/Downloads/test.txt'))
>>> it
<generator object <genexpr> at 0x100c0eaf0>
>>> roots = ((x, x**0.5) for x in it)
>>> print(next(roots))
(5, 2.23606797749979)
```
<br/>

## range보다는 enumerate를 사용하자. 
리스트를 순회하고 싶을때 리스트의 길이를 알아내서 range로 순회할 수도 있지만 세련되지 못하다. 파이썬에서는 이런 상황을 위해 iterator를 감싼 지연 iterator인 enumerate를 제공한다. 
```
>>> flavor_list = ['chocolate', 'icecream', 'cat']
>>> for i, flavor in enumerate(flavor_list):
...     print("{} {}".format(i + 1, flavor))
...
1 chocolate
2 icecream
3 cat
```
<br/>

## 이터레이터를 병렬로 처리하려면 zip을 사용하자
zip은 지연 제너레이터로 둘 이상의 이터레이터로부터 다음 값을 담을 튜플을 얻는다. zip을 사용하는 코드는 인덱스로 다중 리스트에 접근하는 코드보다 이해하기 쉽다. 다만 이터레이터의 길이가 다르다면 결과를 잘라내기 때문에 이 경우는 zip_longest를 고려하자.
```
>>> names = ['erin', 'dragonist', 'jb']
>>> letters = [len(name) for name in names]
>>> for name, count in zip(names, letters):
...     print(name, count)
...
('erin', 4)
('dragonist', 9)
('jb', 2)
```
<br/>

## for 와 while 루프 뒤에는 else 블록을 쓰지 말자
파이썬 루프에는 다른 언어에는 없는 else 블록이 있다. Else 블록은 일반적으로 이전 블록이 실행되지 않으면 실행된다는 의미지만, for/else에서는 for의 실행이 완료되었을 때 else가 실행된다. 뭔가를 검색할때 for/else를 사용할 수 있지만 이를 통해 얻는 이점이 적다. 혼동하기 쉬운 문법이므로 사용하지 말자. 

<br/>

## Try/except/else/finally에서 각 블록의 장점을 이용하자
Try/except/else 에서 else는 예외가 일어나지 않았을 경우 실행되어 except 처리와 시각적으로 구분이 된다. else 블록은 try 블록에 있는 코드의 양을 줄이는데 도움을 준다. 
```
>>> def load_json_key(data, key):
...    try:
...       result_dict = json.loads(data)
...    except ValueError as e:
...         raise KeyError from e
...    else:
...        return result_dict[key]
```

<br/>


<a href="http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=80277523">
  <img class="book" style="width: 30%; height: 30%" src="http://image.aladin.co.kr/product/8027/75/cover/k212434638_1.jpg"/>
</a>